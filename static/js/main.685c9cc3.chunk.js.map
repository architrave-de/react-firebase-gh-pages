{"version":3,"sources":["assets/svgs/one.svg","assets/svgs/second.svg","assets/svgs/third.svg","helpers/firebase.js","helpers/configs.js","helpers/timeFunctions.js","helpers/API.js","containers/AppNavbar/AppNavbar.js","containers/Section/Section.js","containers/CardsGroup/CardsGroup.js","containers/TableBoard/TableBoard.js","containers/Players/Players.js","helpers/slack.js","containers/ControlPanel/AddRound/AddRound.js","containers/ControlPanel/SlackFeauters/SlackFeatures.js","containers/ControlPanel/LoginOptions/LoginInInfos.js","containers/ControlPanel/index.js","containers/MonthlyRecords/MonthlyRecords.js","containers/HomePage/index.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","firebaseUiConfig","redirectUrl","signInOptions","firebase","auth","GoogleAuthProvider","PROVIDER_ID","EmailAuthProvider","callbacks","signInSuccess","currentUser","credential","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","DB","firestore","oneDay","date","Date","dayToYear","startDate","diff","getFullYear","getTimezoneOffset","dayNumber","Math","floor","dateYear","dateMonth","getMonth","slice","yearPrefix","toString","yearDayNumber","parseInt","concat","year","month","dayWithYearNumber","day","apiCall","collection","this","dbCollection","appManifest","get","then","dbValues","forEach","doc","push","data","slackToken","catch","error","console","log","orderBy","orderQuery","querySnapshot","sections","players","days","email","where","playerEntry","id","lastId","name","slackName","image","monthlyRecords","totalPoints","set","player","e","add","insertDate","rounds","entryData","round","insertRound","update","FieldValue","arrayUnion","docs","createNewDayEntry","matches","getCollectionData","points","getToken","NavBar","props","state","appSections","self","databaseCollections","item","setState","className","Navbar","collapseOnSelect","expand","bg","variant","Brand","href","appName","Toggle","aria-controls","Collapse","Nav","map","Link","url","key","style","textDecoration","color","to","React","Component","Section","Jumbotron","background","title","children","CardsGroup","card","index","cardImages","Card","position","Img","src","Body","length","i","Title","description","Footer","dayMatches","todayNumber","cards","second","first","third","Container","Row","Col","md","span","offset","CardDeck","defaultProps","TableBoard","currentDate","yearMonth","Table","striped","bordered","hover","Players","CHANNELS","slackAction","action","args","a","token","Slack","scopes","slack","err","sendMessageToChannel","slackClient","channelName","text","blocks","chat","postMessage","channel","getChannelId","channels","list","filter","getChannelUsers","channelId","conversations","members","getWorkspaceChannels","getUserData","user","users","info","importUsersFormChannel","channelUsers","userData","profile","real_name","image_192","formattedSlackMessage","type","accessory","image_url","alt_text","AddRound","handleInput","persist","target","value","handleDateChange","newRound","dayInfos","handleAddRound","preventDefault","Object","keys","insertedBy","addRound","updatePlayerPoints","playersList","message","JSON","stringify","handleSelectPlayer","stateRound","scores","currentMonthlyPoints","selectedMonthId","updatePlayer","n","backgroundColor","margin","padding","Alert","Heading","Form","Group","controlId","Label","Control","as","onChange","placeholder","onSubmit","Text","selected","maxDate","ButtonToolbar","DropdownButton","toLowerCase","Dropdown","Item","onClick","Button","SlackFunctions","handleImportUsers","handleAddPlayer","processing","alert","handleSelectChannel","selectedChannel","addPlayer","channelUsersNumber","Menu","show","disabled","Spinner","animation","size","role","aria-hidden","LoginInfos","mainButtonAction","Image","rounded","width","ControlPanel","showLoginOptions","onAuthStateChanged","playerByEmail","loading","isUserLogged","substring","lastIndexOf","firebaseui","AuthUI","getInstance","start","handleSignOut","errMessage","signOut","uiExists","playerInfo","form","FormData","playerFields","isUserLoggedIn","lastPlayerId","label","password","Accordion","defaultActiveKey","Header","eventKey","field","MonthlyRecords","dateTitle","monthNumber","InputGroup","Prepend","bind","dateFormat","showMonthYearPicker","HomePage","path","exact","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","initApp","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.685c9cc3.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/one.f15b96a1.svg\";","module.exports = __webpack_public_path__ + \"static/media/second.7f4cae36.svg\";","module.exports = __webpack_public_path__ + \"static/media/third.a034b65e.svg\";","import firebase from 'firebase/app'\nimport { firestone } from 'firebase/firestore'\nimport { firebaseConfig } from './configs'\n\nexport const firebaseUiConfig = ({ redirectUrl }) => {\n  return {\n    signInOptions: [\n      // Leave the lines as is for the providers you want to offer your users.\n      firebase.auth.GoogleAuthProvider.PROVIDER_ID,\n      firebase.auth.EmailAuthProvider.PROVIDER_ID\n    ],\n    callbacks: {\n      signInSuccess: function(currentUser, credential, redirectUrl) {\n        // return false to stop redirecting\n        return false\n      }\n    }\n  }\n}\n\nfirebase.initializeApp(firebaseConfig)\n\nexport const DB = firebase.firestore()\n","export const firebaseConfig = {\n    apiKey: \"AIzaSyAr-tnxDvQTzaewLLGgNnXBQbxpOHyaUbw\",\n    authDomain: \"ping-board-c2743.firebaseapp.com\",\n    databaseURL: \"https://ping-board-c2743.firebaseio.com\",\n    projectId: \"ping-board-c2743\",\n    storageBucket: \"\",\n    messagingSenderId: \"88261141437\",\n    appId: \"1:88261141437:web:2f8e0157e8751fa84568d4\"\n}","let oneDay = 1000 * 60 * 60 * 24\nconst date = new Date()\n\n/**\n * @param {year} [number=2019] {default current year}.\n * @param {month} [number=12] {default current month} day number to month}.\n * @param {firstDay} [number=3] {default first day of the given month} day number to month.\n * @param {lastDay} [number=23] {default last day of the given month} day number to month.\n */\n\nexport function getMonthFirstLastDay({ monthDate = date }) {\n  const thisMonth = monthDate.getMonth()\n  const firstDayOfTheMonth = new Date(monthDate.getFullYear(), thisMonth, 1)\n  const lastDayOfTheMonth = new Date(monthDate.getFullYear(), thisMonth + 1, 0)\n  return {\n    firstDayOfTheMonth,\n    lastDayOfTheMonth\n  }\n}\n\n/**\n * @param {year} [number=2019]\n * @param {startDate} [date=today]\n */\nexport function dayToYear({ startDate = date }) {\n  const yearStartDay = new Date(date.getFullYear(), 0, 0)\n  const diff =\n    startDate -\n    yearStartDay +\n    (date.getTimezoneOffset() - date.getTimezoneOffset()) * 60 * 1000\n  const dayNumber = Math.floor(diff / oneDay)\n  const dateYear = startDate.getFullYear()\n  const dateMonth = ('0' + (startDate.getMonth() + 1)).slice(-2)\n  const yearPrefix = dateYear.toString().slice(-2)\n  const yearDayNumber = parseInt(yearPrefix.concat(dayNumber.toString()))\n  return {\n    year: dateYear,\n    month: dateMonth,\n    dayNumber: dayNumber,\n    yearDayNumber: yearDayNumber\n  }\n}\n\n/**\n * @param {day} object\n * @returns day number to year like 19313 to be used to get the matched day rounds\n */\nexport function dayWithYearNumber({ day }) {\n  const yearPrefix = day.year.toString().slice(-2)\n  const dayNumber = day.dayNumber.toString()\n  return parseInt(yearPrefix.concat(dayNumber))\n}\n\nexport function startEndDates(startDate, endDate) {\n  return {\n    startDateNumber: dayWithYearNumber({ day: startDate }),\n    endDateNumber: dayWithYearNumber({ day: endDate })\n  }\n}\n\nexport function monthName(monthNumber) {\n  const names = [\n    'January',\n    'February',\n    'March',\n    'April',\n    'May',\n    'June',\n    'July',\n    'August',\n    'September',\n    'October',\n    'November',\n    'December'\n  ]\n  return names[monthNumber]\n}\n","import { DB } from './firebase'\nimport { dayToYear, dayWithYearNumber } from '../helpers/timeFunctions'\nimport { firestore } from 'firebase'\n\nexport class API {\n  getToken() {\n    return DB.collection(this.dbCollection().appManifest)\n      .get()\n      .then(collection => {\n        let dbValues = []\n        collection.forEach(doc => {\n          dbValues.push(doc.data())\n        })\n        return dbValues[0].slackToken\n      })\n      .catch(error => {\n        console.log('Error getting slackToken: ', error)\n      })\n  }\n\n  getCollectionData(collection, orderBy, orderQuery) {\n    const collectionData = orderBy\n      ? DB.collection(collection).orderBy(orderBy, orderQuery)\n      : DB.collection(collection)\n    return collectionData.get().then(querySnapshot => {\n      let dbValues = []\n      querySnapshot.forEach(doc => {\n        dbValues.push(doc.data())\n      })\n      return dbValues\n    })\n  }\n\n  dbCollection() {\n    return {\n      appManifest: 'manifest',\n      sections: 'sections',\n      players: 'players',\n      days: 'days'\n    }\n  }\n\n  get currentDayNumber() {\n    return parseInt(dayWithYearNumber({ day: dayToYear({}) }))\n  }\n\n  get players() {\n    return DB.collection(this.dbCollection().players)\n  }\n\n  playerByEmail({ email }) {\n    return DB.collection(this.dbCollection().players)\n      .where('email', '==', email)\n      .get()\n      .then(playerEntry => {\n        console.log(playerEntry)\n        let players = []\n        playerEntry.forEach(function(doc) {\n          players.push({ id: doc.id, ...doc.data() })\n        })\n        return players[0]\n      })\n      .catch(error => {\n        console.log('Error getting player by email: ', error, email)\n      })\n  }\n\n  get playersList() {\n    return DB.collection(this.dbCollection().players)\n      .orderBy('totalPoints', 'desc')\n      .get()\n      .then(querySnapshot => {\n        let players = []\n        querySnapshot.forEach(function(doc) {\n          players.push({ id: doc.id, ...doc.data() })\n        })\n        return players\n      })\n      .catch(error => {\n        console.log('Error getting the results: ', error)\n      })\n  }\n\n  lastPlayerId() {\n    return this.players.get().then(doc => {\n      let lastId = null\n      doc.forEach(doc => {\n        lastId = doc.id\n      })\n      return lastId\n    })\n  }\n\n  addPlayer({\n    name,\n    slackName,\n    image,\n    monthlyRecords = {},\n    email,\n    totalPoints = 0\n  }) {\n    return DB.collection(this.dbCollection().players)\n      .doc()\n      .set({ name, slackName, image, monthlyRecords, email, totalPoints })\n      .then(player => {\n        console.log('the player has beed added')\n      })\n      .catch(e => console.log(e))\n  }\n\n  updatePlayer(player) {\n    console.log('TCL: API -> updatePlayer -> player', player)\n    DB.collection(this.dbCollection().players)\n      .doc(player.id)\n      .set({ ...player })\n      .then(player => {\n        console.log('the player has beed updated---> ', player)\n      })\n      .catch(e => console.log(e))\n  }\n\n  createNewDayEntry({ dayNumber }) {\n    return DB.collection('days')\n      .add({\n        insertDate: new Date(),\n        dayNumber: dayNumber,\n        rounds: []\n      })\n      .then(entryData => {\n        return entryData\n      })\n  }\n\n  addRound({ dayNumber, round }) {\n    const insertRound = doc => {\n      return DB.collection('days')\n        .doc(doc.id)\n        .update({\n          rounds: firestore.FieldValue.arrayUnion({ ...round })\n        })\n    }\n\n    return DB.collection('days')\n      .where('dayNumber', '==', dayNumber)\n      .get()\n      .then(data => {\n        if (!!data.docs[0]) {\n          return insertRound(data.docs[0])\n        } else {\n          return this.createNewDayEntry({ dayNumber: dayNumber }).then(doc => {\n            return insertRound(doc)\n          })\n        }\n      })\n  }\n\n  get todayScores() {\n    return this.getCollectionData(this.dbCollection().points)\n  }\n\n  getDayMatches({ dayNumber }) {\n    return DB.collection('days')\n      .where('dayNumber', '==', dayNumber)\n      .get()\n      .then(querySnapshot => {\n        let matches = []\n        querySnapshot.forEach(function(doc) {\n          matches.push(doc.data())\n        })\n        return matches\n      })\n      .then(data => data)\n      .catch(error => {\n        console.log('Error getting the results: ', error)\n      })\n  }\n}\n\nconst apiCall = new API()\nexport default apiCall\n\nconsole.log(apiCall.getToken())\n","import React from 'react'\nimport Navbar from 'react-bootstrap/Navbar'\nimport Nav from 'react-bootstrap/Nav'\nimport apiCall from '../../helpers/API'\nimport './navbar.scss'\nimport { Link } from 'react-router-dom'\n\nexport default class NavBar extends React.Component {\n  constructor(props) {\n    super(props)\n    this.state = {\n      appSections: []\n    }\n  }\n\n  componentDidMount() {\n    const self = this\n    const databaseCollections = apiCall.dbCollection()\n    apiCall.getCollectionData(databaseCollections.sections).then(data => {\n      let sections = []\n      data.forEach(item => sections.push(item))\n      self.setState({ appSections: sections })\n      return sections\n    })\n  }\n\n  render() {\n    const sections = this.state.appSections\n\n    return (\n      <div className=\"app-navbar\">\n        <Navbar collapseOnSelect expand=\"lg\" bg=\"dark\" variant=\"dark\">\n          <Navbar.Brand href=\"/\">{this.props.appName}</Navbar.Brand>\n          <Navbar.Toggle aria-controls=\"responsive-navbar-nav\" />\n          <Navbar.Collapse id=\"responsive-navbar-nav\">\n            <Nav className=\"mr-auto\">\n              {sections.map(item => (\n                <Nav.Link href={item.url} key={item.name}>\n                  <Link\n                    style={{ textDecoration: 'none', color: 'inherit' }}\n                    to={item.url}\n                  >\n                    {' '}\n                    {item.name}\n                  </Link>\n                </Nav.Link>\n              ))}\n            </Nav>\n          </Navbar.Collapse>\n        </Navbar>\n      </div>\n    )\n  }\n}\n","import React from 'react'\nimport Jumbotron from 'react-bootstrap/Jumbotron'\nimport './section.scss'\n\nexport default class Section extends React.Component {\n  constructor(props) {\n    super(props)\n    this.state = {}\n  }\n\n  render() {\n    return (\n      <>\n        <div className=\"section-wrapper\">\n          <Jumbotron className={`section section--${this.props.background}`}>\n            <div>\n              <h2 className=\"section__title\">{this.props.title}</h2>\n            </div>\n            {this.props.children}\n          </Jumbotron>\n        </div>\n      </>\n    )\n  }\n}\n","import React from 'react'\nimport Container from 'react-bootstrap/Container'\nimport Row from 'react-bootstrap/Row'\nimport Col from 'react-bootstrap/Col'\nimport CardDeck from 'react-bootstrap/CardDeck'\nimport Card from 'react-bootstrap/Card'\nimport first from '../../assets/svgs/one.svg'\nimport second from '../../assets/svgs/second.svg'\nimport third from '../../assets/svgs/third.svg'\nimport PropTypes from 'prop-types'\nimport './cards-group.scss'\nimport { DB } from '../../helpers/firebase'\nimport { dayToYear, dayWithYearNumber } from '../../helpers/timeFunctions'\n\nexport default class CardsGroup extends React.Component {\n  constructor(props) {\n    super(props)\n    this.state = {\n      dayMatches: []\n    }\n  }\n\n  componentDidMount() {\n    const todayNumber = dayWithYearNumber({ day: dayToYear({}) })\n    const self = this\n    DB.collection('days')\n      .where('dayNumber', '==', todayNumber)\n      .get()\n      .then(querySnapshot => {\n        querySnapshot.forEach(function(doc) {\n          self.setState({\n            dayMatches: [...self.state.dayMatches, doc.data()]\n          })\n        })\n      })\n      .catch(error => {\n        console.log('Error getting the results: ', error)\n      })\n  }\n\n  card = (card, index, cardImages) => {\n    const { rounds } = card\n    return (\n      <Card className={`card-${card.position}`} key={index}>\n        <div className=\"cards-group__image-wrapper\">\n          <Card.Img variant=\"top\" src={cardImages[index]} />\n        </div>\n        <Card.Body>\n          {rounds.length >= 1 ? (\n            rounds.map((round, i) => (\n              <div key={i}>\n                <Card.Title>\n                  <h5>{round.description}</h5>\n                </Card.Title>\n                <ul>\n                  <li>{round.players && round.players[card.position].name}</li>\n                </ul>\n              </div>\n            ))\n          ) : (\n            <>\n              <Card.Title>there is no data</Card.Title>\n            </>\n          )}\n        </Card.Body>\n        <Card.Footer></Card.Footer>\n      </Card>\n    )\n  }\n\n  render() {\n    const cards = this.props.cards\n    if (this.state.dayMatches[0]) {\n      cards.map(card => {\n        card.rounds = this.state.dayMatches[0].rounds || []\n      })\n    }\n\n    const cardImages = [second, first, third]\n    return (\n      <>\n        <Container className=\"cards-group\">\n          <Row>\n            }\n            <Col md={{ span: 10, offset: 1 }}>\n              <CardDeck>\n                {!!cards &&\n                  cards.forEach(card => {\n                    if (card.rounds.length < 1) {\n                    }\n                  })}\n                {cards.map((card, index) => this.card(card, index, cardImages))}\n              </CardDeck>\n            </Col>\n          </Row>\n        </Container>\n      </>\n    )\n  }\n}\n\nCardsGroup.propTypes = {\n  cards: PropTypes.array\n}\n\nCardsGroup.defaultProps = {\n  cards: [\n    { position: 2, rounds: [] },\n    { position: 1, rounds: [] },\n    { position: 3, rounds: [] }\n  ]\n}\n","import React from 'react'\nimport Table from 'react-bootstrap/Table'\nimport Row from 'react-bootstrap/Row'\nimport Col from 'react-bootstrap/Col'\nimport Container from 'react-bootstrap/Container'\nimport { DB } from '../../helpers/firebase'\nimport { dayToYear } from '../../helpers/timeFunctions'\n\nexport default class TableBoard extends React.Component {\n  constructor(props) {\n    super(props)\n    this.state = {\n      players: [],\n      month: null\n    }\n  }\n\n  componentDidMount() {\n    const currentDate = dayToYear({})\n    const yearMonth = currentDate.year\n      .toString()\n      .slice(-2)\n      .concat(currentDate.month.toString())\n    this.setState({ month: yearMonth })\n\n    const self = this\n    DB.collection('players')\n      .orderBy(`monthlyRecords.${yearMonth}`, 'desc')\n      .get()\n      .then(querySnapshot => {\n        let players = []\n        querySnapshot.forEach(function(doc) {\n          players.push(doc.data())\n        })\n        self.setState({\n          players: players\n        })\n      })\n      .catch(error => {\n        console.log('Error getting the results: ', error)\n      })\n  }\n\n  render() {\n    const { players, month } = this.state\n    return (\n      <>\n        <Container>\n          <Row>\n            <Col md={{ span: 10, offset: 1 }}>\n              <Table striped bordered hover variant=\"dark\">\n                <thead>\n                  <tr>\n                    <th>#</th>\n                    <th>First Name</th>\n                    <th>Slack name</th>\n                    <th>Points</th>\n                  </tr>\n                </thead>\n                <tbody>\n                  {players &&\n                    players.map((player, i) => (\n                      <tr key={i}>\n                        <td>{i + 1}</td>\n                        <td>{player.name}</td>\n                        <td>{player.slackName}</td>\n                        <td>{player.monthlyRecords[month]}</td>\n                      </tr>\n                    ))}\n                </tbody>\n              </Table>\n            </Col>\n          </Row>\n        </Container>\n      </>\n    )\n  }\n}\n","import React from 'react'\nimport Table from 'react-bootstrap/Table'\nimport Row from 'react-bootstrap/Row'\nimport Col from 'react-bootstrap/Col'\nimport Container from 'react-bootstrap/Container'\nimport apiCall from '../../helpers/API'\n\nexport default class Players extends React.Component {\n  constructor(props) {\n    super(props)\n    this.state = {\n      players: []\n    }\n  }\n\n  componentDidMount() {\n    const self = this\n    apiCall.players\n      .orderBy('totalPoints', 'desc')\n      .get()\n      .then(querySnapshot => {\n        let players = []\n        querySnapshot.forEach(function(doc) {\n          players.push(doc.data())\n        })\n        self.setState({\n          players: players\n        })\n      })\n      .catch(error => {\n        console.log('Error getting the results: ', error)\n      })\n  }\n\n  render() {\n    const { players } = this.state\n    return (\n      <>\n        <Container>\n          <Row>\n            <Col md={{ span: 10, offset: 1 }}>\n              <h4>Total players {players.length}</h4>\n              <Table striped bordered hover variant=\"dark\">\n                <thead>\n                  <tr>\n                    <th>Total points</th>\n                    <th>Name</th>\n                    <th>email</th>\n                    <th>Slack name</th>\n                  </tr>\n                </thead>\n                <tbody>\n                  {players.map((player, i) => (\n                    <tr key={i}>\n                      <td>{player.totalPoints}</td>\n                      <td>{player.name}</td>\n                      <td>{player.email}</td>\n                      <td>{player.slackName}</td>\n                    </tr>\n                  ))}\n                </tbody>\n              </Table>\n            </Col>\n          </Row>\n        </Container>\n      </>\n    )\n  }\n}\n","import Slack from 'slack'\nimport apiCall from '../helpers/API'\n\nconst CHANNELS = {\n  tableTennis: '',\n  mainSport: 'archsports',\n  tableTennisTest: 'test-bot-firebase'\n}\n\n/**\n * avoid using token locally and get it form the DB upon each action\n * @param {function}  action - to fire after getting the token\n * @param {object} args - pass to action function\n */\nexport const slackAction = async (action, args) => {\n  return apiCall\n    .getToken()\n    .then(token => {\n      return new Slack({\n        token: token,\n        scopes: 'bot'\n      })\n    })\n    .then(slack => action({ ...args }, slack))\n    .catch(err => console.error(err))\n}\n\n/**\n * @param {userId} string || number - slack user id\n * @param {text} string - message text\n * @returns {undefined}\n */\nexport const openConversation = async (\n  { userId = 'UDF2V2LBE', text },\n  slackClient\n) => {\n  return slackClient.conversations\n    .open({ users: userId })\n    .then(data => {\n      sendMessageToChannel({ channelName: data.channel.id, text: 'new DM' })\n    })\n    .then(res => res)\n    .catch(error => console.error())\n}\n\n/**\n * @param {channel} string - channel name\n * @param {text} string - message text\n * @returns {string} - channel ID\n */\nexport const sendMessageToChannel = (\n  { channelName = CHANNELS.tableTennisTest, text, blocks = [] },\n  slackClient\n) => slackClient.chat.postMessage({ channel: channelName, text, blocks })\n\n/**\n * @param {channel} string - channel name\n * @returns {string} - channel ID\n */\nexport const getChannelId = async (\n  { channelName = CHANNELS.tableTennisTest },\n  slackClient\n) => {\n  return slackClient.channels\n    .list({ channel: channelName })\n    .then(data => {\n      const matchedChannel =\n        data.channels.filter(channel => channel.name === channelName)[0] || null\n      return matchedChannel.id\n    })\n    .catch(err => console.error(err))\n}\n\n/**\n * @param {channelId} string|| number - channel id\n * @returns {array} - channel members\n */\nexport const getChannelUsers = ({ channelId }, slackClient) => {\n  return slackClient.conversations.members({ channel: channelId })\n}\n\n/**\n * @returns {array} - all workspace members, including the inactive ones\n */\nexport const getWorkspaceUsers = async slackClient => {\n  return slackClient.users.list().then(data => {\n    return data.members\n  })\n}\n\n/**\n * @returns {array} - all workspace members, including the inactive ones\n */\nexport const getWorkspaceChannels = ({}, slackClient) => {\n  return slackClient.channels.list().then(data => data.channels)\n}\n\n/**\n * @param {userId} string|| number - channel id\n * @returns {object} - user infos\n */\nconst getUserData = ({ user }, slackClient) => {\n  return slackClient.users.info({ user })\n}\n\n/**\n * @param {channelName} string - slack channel name without (hash)\n * @returns {array} - array of objects each represent a user infos\n */\nexport const importUsersFormChannel = async ({ channelName }, slackClient) => {\n  const channelId = await getChannelId({ channelName }, slackClient)\n  const channelUsers = await getChannelUsers(\n    { channelId: channelId },\n    slackClient\n  )\n  let users = []\n  channelUsers.members.forEach(async user => {\n    const userData = await getUserData({ user }, slackClient)\n    const { real_name, email, image_192 } = userData.user.profile\n    users.push({\n      slackName: userData.user.name,\n      name: real_name,\n      email,\n      image: image_192\n    })\n  })\n\n  return users\n}\n\n/**\n * @param {rounds} array - new added round, contains information about the round and the playerrs\n * @returns {array} - array JSON like array (needed to refactor to eliminate code duplicate)\n */\nexport const formattedSlackMessage = ({ round }) => {\n  const { players } = round\n  return [\n    {\n      type: 'divider'\n    },\n    {\n      type: 'section',\n      text: {\n        type: 'mrkdwn',\n        text: `*${round.description}*\\n`\n      }\n    },\n    {\n      type: 'section',\n      text: {\n        type: 'mrkdwn',\n        text: `* 1: ${players['1'].name}* :first_place_medal:\\n got the first place with 3 points`\n      },\n      accessory: {\n        type: 'image',\n        image_url: `${players['1'].image}`,\n        alt_text: `${players['1'].name}`\n      }\n    },\n    {\n      type: 'section',\n      text: {\n        type: 'mrkdwn',\n        text: `* 2: ${players['2'].name}* :second_place_medal:\\n got the second place with 2 points`\n      },\n      accessory: {\n        type: 'image',\n        image_url: `${players['2'].image}`,\n        alt_text: `${players['2'].name}`\n      }\n    },\n    {\n      type: 'section',\n      text: {\n        type: 'mrkdwn',\n        text: `* 3: ${players['3'].name}* :third_place_medal:\\n got the third place with 1 points`\n      },\n      accessory: {\n        type: 'image',\n        image_url: `${players['3'].image}`,\n        alt_text: `${players['3'].name}`\n      }\n    }\n  ]\n}\n","import React from 'react'\nimport Form from 'react-bootstrap/Form'\nimport Button from 'react-bootstrap/Button'\nimport Row from 'react-bootstrap/Row'\nimport ButtonToolbar from 'react-bootstrap/ButtonToolbar'\nimport Dropdown from 'react-bootstrap/Dropdown'\nimport DropdownButton from 'react-bootstrap/DropdownButton'\nimport apiCall from '../../../helpers/API'\nimport Card from 'react-bootstrap/Card'\nimport Alert from 'react-bootstrap/Alert'\nimport Col from 'react-bootstrap/Col'\nimport DatePicker from 'react-datepicker'\nimport { dayToYear } from '../../../helpers/timeFunctions'\nimport {\n  slackAction,\n  sendMessageToChannel,\n  formattedSlackMessage\n} from '../../../helpers/slack'\nimport 'react-datepicker/dist/react-datepicker.css'\n\nexport default class AddRound extends React.Component {\n  constructor(props) {\n    super(props)\n    this.state = {\n      error: null,\n      playersList: [],\n      round: {\n        players: {},\n        date: null,\n        insertDate: new Date(),\n        description: ''\n      }\n    }\n  }\n\n  componentDidMount() {\n    apiCall.playersList.then(list => {\n      this.setState({\n        playersList: list\n      })\n    })\n  }\n\n  handleInput = e => {\n    e.persist()\n    const { name, value } = e.target\n    const round = this.state.round\n    round[name] = value\n    this.setState({ round: round })\n  }\n\n  handleDateChange = date => {\n    const newRound = this.state.round\n    newRound.date = date\n    newRound.players = {}\n    this.setState({ round: newRound, dayInfos: dayToYear({ startDate: date }) })\n  }\n\n  handleAddRound = e => {\n    e.preventDefault()\n    const { round, dayInfos } = this.state\n    if (Object.keys(round.players).length < 3) {\n      this.setState({ error: 'please choose 3 players!' })\n      return false\n    }\n    // ToDo: add the insertedBy data after having login feature\n    round.insertedBy = {}\n    apiCall\n      .addRound({ dayNumber: dayInfos.yearDayNumber, round: round })\n      .then(data => {\n        const { players } = round\n        for (let player of Object.keys(players)) {\n          this.updatePlayerPoints(players[player])\n        }\n        this.setState({\n          error: null,\n          playersList: [],\n          round: {\n            players: {},\n            date: null,\n            insertDate: new Date(),\n            description: ''\n          }\n        })\n      })\n      .then(data => {\n        const message = formattedSlackMessage({ round })\n        slackAction(sendMessageToChannel, {\n          channelName: 'test-bot-firebase',\n          text: round.description,\n          blocks: JSON.stringify(message)\n        })\n      })\n      .catch(error => console.log('there is an error', error))\n  }\n\n  updatePlayerPoints(player) {\n    apiCall.updatePlayer(player)\n  }\n\n  selectedMonthId(date) {\n    const n = dayToYear({ startDate: date })\n    const { year, month } = n\n    const yearMonth = year\n      .toString()\n      .slice(-2)\n      .concat(month.toString())\n    return yearMonth\n  }\n\n  handleSelectPlayer = e => {\n    const stateRound = this.state.round\n    const scores = [0, 3, 2, 1]\n    const { name, id } = e.target\n    const position = name\n    // get the selected player\n    const player = this.state.playersList.filter(player => player.id === id)[0]\n    // set selected player monthly points\n    const currentMonthlyPoints =\n      player.monthlyRecords[this.selectedMonthId(stateRound.date)] || 0\n    player.monthlyRecords[this.selectedMonthId(stateRound.date)] =\n      currentMonthlyPoints + scores[position]\n\n    //set selected player total point\n    player.totalPoints = player.totalPoints + scores[position]\n\n    //set the final player\n    stateRound.players[position] = player\n    this.setState({\n      round: { ...stateRound },\n      error: null\n    })\n  }\n\n  render() {\n    const { players } = this.state.round || {}\n    const positions = [\n      { style: 'Success', id: 1, title: 'First Player' },\n      { style: 'Primary', id: 2, title: 'Second Player' },\n      { style: 'Secondary', id: 3, title: 'third Player' }\n    ]\n    return (\n      <Card\n        style={{ backgroundColor: 'white', margin: '14px 0', padding: '7px' }}\n      >\n        <Alert variant=\"secondary\">\n          <Alert.Heading>{this.props.title}</Alert.Heading>\n\n          <hr></hr>\n          <Form.Group controlId=\"roundDescription\">\n            <Form.Label>Give it a name</Form.Label>\n            <Form.Control\n              type=\"text\"\n              as=\"input\"\n              name=\"description\"\n              onChange={this.handleInput}\n              value={this.state.round.description}\n              placeholder=\"like lunch round..\"\n            />\n          </Form.Group>\n\n          <Form onSubmit={this.handleAddRound}>\n            <Form.Group controlId=\"roundDate\">\n              <Form.Label>Select round's date</Form.Label>\n              <br></br>\n              <Form.Text className=\"text-muted\">it's mandatory!</Form.Text>\n              <DatePicker\n                selected={this.state.round.date}\n                onChange={this.handleDateChange}\n                maxDate={new Date()}\n              />\n            </Form.Group>\n            <hr></hr>\n            {!!this.state.round.date && (\n              <Form.Row>\n                <ButtonToolbar>\n                  <Row>\n                    {positions.map((variant, i) => (\n                      <Col>\n                        <h6>\n                          {players[variant.id] ? players[variant.id].name : '-'}\n                        </h6>\n                        <DropdownButton\n                          title={variant.title}\n                          variant={variant.style.toLowerCase()}\n                          id={`dropdown-variants-${variant.style}`}\n                          key={variant.id}\n                        >\n                          {!!this.state.playersList &&\n                            this.state.playersList.map((player, i) => (\n                              <Dropdown.Item\n                                key={i}\n                                // position < first/second/third>\n                                name={variant.id}\n                                id={player.id}\n                                onClick={this.handleSelectPlayer}\n                              >\n                                {player.name}\n                              </Dropdown.Item>\n                            ))}\n                        </DropdownButton>\n                      </Col>\n                    ))}\n                  </Row>\n                </ButtonToolbar>\n              </Form.Row>\n            )}\n            <br />\n            {!!this.state.error && (\n              <>\n                <Alert key={4} variant=\"warning\">\n                  {this.state.error}\n                </Alert>\n                <br />\n              </>\n            )}\n            <Button variant=\"outline-info\" type=\"submit\">\n              Add Round\n            </Button>\n            <Form.Row></Form.Row>\n          </Form>\n        </Alert>\n      </Card>\n    )\n  }\n}\n","import React, { Component } from 'react'\nimport Dropdown from 'react-bootstrap/Dropdown'\nimport Button from 'react-bootstrap/Button'\nimport Alert from 'react-bootstrap/Alert'\nimport apiCall from '../../../helpers/API'\nimport {\n  slackAction,\n  getWorkspaceChannels,\n  importUsersFormChannel\n} from '../../../helpers/slack'\nimport Spinner from 'react-bootstrap/Spinner'\n\nexport default class SlackFunctions extends Component {\n  constructor(props) {\n    super(props)\n    this.state = {\n      channels: [],\n      processing: false,\n      channelUsers: [],\n      channelUsersNumber: null,\n      selectedChannel: 'Select channel',\n      alert: false\n    }\n  }\n\n  componentDidMount() {\n    const self = this\n    console.log('slack features')\n    slackAction(getWorkspaceChannels).then(channels => {\n      self.setState({ channels })\n    })\n  }\n\n  handleImportUsers = () => {\n    const self = this\n    this.state.channelUsers.forEach((item, i) => {\n      item.email = item.email || 'no@email.here'\n      self.handleAddPlayer(item)\n    })\n    this.setState({\n      processing: true,\n      alert: true\n    })\n  }\n\n  handleSelectChannel = e => {\n    const { name } = e.target\n    e.preventDefault()\n    const self = this\n    self.setState({\n      processing: true,\n      selectedChannel: name\n    })\n\n    slackAction(importUsersFormChannel, { channelName: name }).then(users => {\n      self.setState({\n        channelUsers: users,\n        processing: false\n      })\n    })\n  }\n\n  handleAddPlayer = player => {\n    apiCall.addPlayer({ ...player })\n  }\n\n  render() {\n    return (\n      <div className=\"slack-function\">\n        <>\n          <Alert variant=\"secondary\">\n            <Alert.Heading>{this.props.title}</Alert.Heading>\n            <hr />\n            <Dropdown>\n              <Dropdown.Toggle variant=\"success\" id=\"dropdown-basic\">\n                {this.state.selectedChannel}\n              </Dropdown.Toggle>\n\n              <Dropdown.Menu>\n                {this.state.channels.map((channel, id) => (\n                  <Dropdown.Item\n                    key={id}\n                    name={channel.name}\n                    onClick={this.handleSelectChannel}\n                  >\n                    {channel.name}\n                  </Dropdown.Item>\n                ))}\n              </Dropdown.Menu>\n            </Dropdown>\n            <br />\n            <Alert variant=\"success\" show={this.state.alert}>\n              {/* {this.state.channelUsers.length} has been imported{' '} */}\n            </Alert>\n            <div className=\"d-flex justify-content-end\">\n              <Button\n                disabled={this.state.processing}\n                onClick={this.handleImportUsers}\n                variant=\"outline-success\"\n              >\n                {!!this.state.processing ? (\n                  <>\n                    <Spinner\n                      as=\"span\"\n                      animation=\"grow\"\n                      size=\"sm\"\n                      role=\"status\"\n                      aria-hidden=\"true\"\n                    />{' '}\n                    processing ...{' '}\n                  </>\n                ) : (\n                  `Import users`\n                )}\n              </Button>\n            </div>\n          </Alert>\n        </>\n      </div>\n    )\n  }\n}\n","import Alert from 'react-bootstrap/Alert'\nimport Button from 'react-bootstrap/Button'\nimport Image from 'react-bootstrap/Image'\nimport React from 'react'\n\nexport default function LoginInfos({\n  mainButtonAction,\n  title = 'Welcome!',\n  user = { name: 'user name' }\n}) {\n  return (\n    <Alert variant=\"secondary\">\n      <Alert.Heading>\n        {title} {user.name}\n      </Alert.Heading>\n      <hr />\n      <Image src={user.image} rounded style={{ width: '96px' }} />\n      <br />\n      you are logged in, you can sign out here.\n      <div className=\"d-flex justify-content-end\">\n        <Button onClick={() => mainButtonAction({})} variant=\"outline-info\">\n          Log me out\n        </Button>\n      </div>\n    </Alert>\n  )\n}\n","import React from 'react'\nimport PropTypes from 'prop-types'\nimport Form from 'react-bootstrap/Form'\nimport Col from 'react-bootstrap/Col'\nimport Button from 'react-bootstrap/Button'\nimport Row from 'react-bootstrap/Row'\nimport Accordion from 'react-bootstrap/Accordion'\nimport Card from 'react-bootstrap/Card'\nimport Container from 'react-bootstrap/Container'\nimport apiCall from '../../helpers/API'\nimport AddRound from './AddRound/AddRound'\nimport * as firebaseui from 'firebaseui'\nimport firebase from 'firebase/app'\nimport 'firebaseui/dist/firebaseui.css'\nimport Spinner from 'react-bootstrap/Spinner'\nimport { firebaseUiConfig } from '../../helpers/firebase'\nimport SlackFeatures from './SlackFeauters/SlackFeatures'\nimport LoginInfos from './LoginOptions/LoginInInfos'\n\nexport default class ControlPanel extends React.Component {\n  constructor(props) {\n    super(props)\n    this.state = {\n      errMessage: null,\n      loading: true,\n      isUserLoggedIn: true,\n      lastPlayerId: null,\n      currentUser: '',\n      playerFields: {\n        name: {\n          name: 'name',\n          label: 'Name',\n          type: 'text',\n          placeholder: 'enter player name'\n        },\n        email: {\n          name: 'email',\n          label: 'Email',\n          type: 'email',\n          placeholder: 'enter player email'\n        },\n        password: {\n          name: 'password',\n          label: 'Password',\n          type: 'password',\n          placeholder: 'password'\n        },\n        slackName: {\n          name: 'slackName',\n          label: 'Slack name',\n          type: 'text',\n          placeholder: 'enter player slack name'\n        },\n        image: {\n          name: 'image',\n          label: 'Image',\n          type: 'text',\n          placeholder: 'enter image path'\n        }\n      }\n    }\n  }\n\n  componentDidMount() {\n    this.showLoginOptions({})\n    apiCall\n      .lastPlayerId()\n      .then(id =>\n        this.setState({\n          lastPlayerId: parseInt(id) + 1\n        })\n      )\n      .catch(e => {\n        console.log('the player id cant be generated')\n      })\n  }\n\n  showLoginOptions = () => {\n    const self = this\n    firebase.auth().onAuthStateChanged(function(user) {\n      if (user) {\n        console.log('TCL: ControlPanel -> showLoginOptions -> user', user)\n        apiCall.playerByEmail({ email: user.email }).then(user => {\n          self.setState({\n            loading: false,\n            isUserLogged: true,\n            currentUser: user\n          })\n        })\n        const { email } = user\n        const emailDomain = email.substring(email.lastIndexOf('@') + 1)\n        if (emailDomain !== 'architrave') {\n        }\n      } else {\n        self.setState({\n          loading: false,\n          isUserLogged: false\n        })\n      }\n    })\n    // Initialize the FirebaseUI Widget using Firebase.\n    const ui =\n      firebaseui.auth.AuthUI.getInstance() ||\n      new firebaseui.auth.AuthUI(firebase.auth())\n\n    // The start method will wait until the DOM is loaded.\n    ui.start('#firebaseui-auth-container', firebaseUiConfig({}))\n  }\n\n  handleSignOut = ({ errMessage }) => {\n    const self = this\n    firebase\n      .auth()\n      .signOut()\n      .then(data => {\n        self.setState({\n          loading: true,\n          isUserLogged: false,\n          errMessage: errMessage || null,\n          currentUser: null\n        })\n        self.showLoginOptions({ uiExists: true })\n      })\n  }\n\n  handleAddPlayer = e => {\n    e.preventDefault()\n    const playerInfo = {}\n    const form = new FormData(e.target)\n    for (let item in this.state.playerFields) {\n      playerInfo[item] = form.get(item)\n    }\n    apiCall.addPlayer({ ...playerInfo }).then(data => {})\n  }\n\n  render() {\n    const { playerFields, isUserLogged, loading, currentUser } = this.state\n    const addPlayerForm = () => {\n      return (\n        <Form onSubmit={this.handleAddPlayer}>\n          {!!playerFields &&\n            Object.keys(playerFields).map(field => (\n              <Form.Group key={playerFields[field].name}>\n                <Form.Label>{playerFields[field].label}</Form.Label>\n                <Form.Control {...playerFields[field]} />\n              </Form.Group>\n            ))}\n          <Button variant=\"primary\" type=\"submit\">\n            Add new player\n          </Button>\n        </Form>\n      )\n    }\n\n    const content = () => (\n      <Container>\n        <Row>\n          <Col md={{ span: 10, offset: 1 }}>\n            {isUserLogged ? (\n              <>\n                <LoginInfos\n                  mainButtonAction={this.handleSignOut}\n                  user={currentUser}\n                />\n                <AddRound title=\"Add new round\" user={currentUser} />\n                <br />\n                <SlackFeatures title=\"Import Slack channel's users\" />\n                <br />\n                <Accordion defaultActiveKey=\"0\">\n                  <Card>\n                    <Accordion.Toggle as={Card.Header} eventKey=\"1\">\n                      Add player manually\n                    </Accordion.Toggle>\n                    <Accordion.Collapse eventKey=\"1\">\n                      <Card.Body>{addPlayerForm()}</Card.Body>\n                    </Accordion.Collapse>\n                  </Card>\n                </Accordion>\n              </>\n            ) : (\n              <Card className=\"text-left\">\n                {!!loading && (\n                  <Button variant=\"primary\" disabled>\n                    <Spinner\n                      as=\"span\"\n                      animation=\"grow\"\n                      size=\"sm\"\n                      role=\"status\"\n                      aria-hidden=\"true\"\n                    />\n                    Loading...\n                  </Button>\n                )}\n                <Card.Header></Card.Header>\n                <Card.Body>\n                  <Card.Title>Please Login to continue ..</Card.Title>\n                  <Card.Text>\n                    <div id=\"firebaseui-auth-container\"></div>\n                  </Card.Text>\n                </Card.Body>\n              </Card>\n            )}\n          </Col>\n        </Row>\n      </Container>\n    )\n\n    return <>{content()}</>\n  }\n}\n\nControlPanel.propTypes = {\n  Auth: PropTypes.array\n}\n","import React from 'react'\nimport DatePicker from 'react-datepicker'\nimport Container from 'react-bootstrap/Container'\nimport Col from 'react-bootstrap/Col'\nimport Row from 'react-bootstrap/Row'\nimport InputGroup from 'react-bootstrap/InputGroup'\nimport { monthName } from '../../helpers/timeFunctions'\n\nexport default class MonthlyRecords extends React.Component {\n  constructor(props) {\n    super(props)\n    this.state = {\n      date: null,\n      dateTitle: ''\n    }\n  }\n\n  handleDateChange(e) {\n    const date = new Date(e)\n    const month = date.getMonth()\n    const year = date.getFullYear()\n    const stateDate = this.setState({\n      dateTitle: `${monthName(month)} ${year}`\n    })\n  }\n\n  render() {\n    return (\n      <>\n        <Container>\n          <Row>\n            <Col md={{ span: 6, offset: 3 }}>\n              <h6>{this.state.dateTitle}</h6>\n              <InputGroup className=\"mb-3\">\n                <InputGroup.Prepend>\n                  <InputGroup.Text id=\"basic-addon1\">Date</InputGroup.Text>\n                  <DatePicker\n                    selected={this.state.date}\n                    onChange={this.handleDateChange.bind(this)}\n                    maxDate={new Date()}\n                    dateFormat=\"MM.yyyy\"\n                    showMonthYearPicker\n                  />\n                </InputGroup.Prepend>\n              </InputGroup>\n            </Col>\n          </Row>\n        </Container>\n      </>\n    )\n  }\n}\n","import React from 'react'\nimport AppNavbar from '../../containers/AppNavbar/AppNavbar'\nimport Section from '../../containers/Section/Section'\nimport CardsGroup from '../CardsGroup/CardsGroup'\nimport TableBoard from '../TableBoard/TableBoard'\nimport { BrowserRouter as Router, Route } from 'react-router-dom'\nimport Players from '../Players/Players'\nimport Control from '../ControlPanel'\nimport MonthlyRecords from '../MonthlyRecords/MonthlyRecords'\n\nexport default class HomePage extends React.Component {\n  render() {\n    return (\n      <div>\n        <Router>\n          <AppNavbar appName={this.props.name} />\n          <Route path=\"/\" exact>\n            <Section title=\"Todays Records\" background=\"black\">\n              <CardsGroup />\n            </Section>\n            <Section title=\"Monthly Records\">\n              <TableBoard />\n            </Section>\n          </Route>\n\n          <Route path=\"/players\" exact>\n            <Section title=\"Players table\">\n              <Players />\n            </Section>\n          </Route>\n\n          <Route path=\"/year\" exact>\n            <Section title=\"Yearly table\">\n              <h2>here is the Yearly table</h2>\n            </Section>\n          </Route>\n\n          <Route path=\"/month\" exact>\n            <Section title=\"Month\">\n              <MonthlyRecords />\n            </Section>\n          </Route>\n\n          <Route path=\"/control-panel\" exact>\n            <Section title=\"Admin Control\">\n              <Control />\n            </Section>\n          </Route>\n        </Router>\n      </div>\n    )\n  }\n}\n","import React from 'react'\nimport HomePage from './containers/HomePage'\n\nexport class App extends React.Component {\n  constructor(props) {\n    super(props)\n    this.state = {\n      appManifest: {\n        appName: '..loading'\n      }\n    }\n  }\n\n  render() {\n    return <HomePage name={this.props.name} />\n  }\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './App'\nimport './theme/index.scss'\nimport * as serviceWorker from './serviceWorker'\nimport apiCall from './helpers/API'\nimport 'bootstrap/dist/css/bootstrap.min.css'\n\nconst initApp = () => {\n  const databaseCollections = apiCall.dbCollection()\n  apiCall.getCollectionData(databaseCollections.appManifest).then(data => {\n    const name = data[0].name || 'app name'\n    ReactDOM.render(<App name={name} />, document.getElementById('root'))\n  })\n}\n\ninitApp()\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister()\n"],"sourceRoot":""}