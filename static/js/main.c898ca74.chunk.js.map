{"version":3,"sources":["assets/svgs/one.svg","assets/svgs/second.svg","assets/svgs/third.svg","helpers/firebase.js","helpers/configs.js","helpers/timeFunctions.js","helpers/API.js","containers/AppNavbar/AppNavbar.js","containers/Section/Section.js","containers/CardsGroup/CardsGroup.js","containers/TableBoard/TableBoard.js","containers/Players/Players.js","containers/ControlPanel/AddRound/AddRound.js","containers/ControlPanel/index.js","containers/MonthlyRecords/MonthlyRecords.js","containers/HomePage/index.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","DB","firestore","oneDay","date","Date","dayToYear","startDate","diff","getFullYear","getTimezoneOffset","dayNumber","Math","floor","dateYear","dateMonth","getMonth","slice","yearPrefix","toString","yearDayNumber","parseInt","concat","year","month","dayWithYearNumber","day","apiCall","collection","orderBy","orderQuery","get","then","querySnapshot","dbValues","forEach","doc","push","data","appManifest","sections","players","days","this","lastId","id","name","slackName","image","monthlyRecords","email","totalPoints","dbCollection","set","player","console","log","catch","e","add","insertDate","rounds","entryData","round","insertRound","update","FieldValue","arrayUnion","where","docs","createNewDayEntry","matches","error","getCollectionData","points","NavBar","props","state","appSections","self","databaseCollections","item","setState","className","Navbar","collapseOnSelect","expand","bg","variant","Brand","href","process","appName","Toggle","aria-controls","Collapse","Nav","map","Link","url","key","style","textDecoration","color","to","React","Component","Section","Jumbotron","background","title","children","CardsGroup","card","index","cardImages","Card","position","Img","src","Body","length","i","Title","description","Footer","dayMatches","todayNumber","cards","second","first","third","Container","Row","Col","md","span","offset","CardDeck","defaultProps","TableBoard","currentDate","yearMonth","Table","striped","bordered","hover","Players","AddRound","handleInput","persist","target","value","handleDateChange","newRound","dayInfos","handleAddRound","preventDefault","Object","keys","insertedBy","addRound","updatePlayerPoints","playersList","handleSelectPlayer","stateRound","scores","filter","actualMonthlyPoints","selectedMonthId","list","updatePlayer","n","backgroundColor","margin","padding","Form","Group","controlId","Label","Control","type","as","onChange","placeholder","onSubmit","Text","selected","maxDate","ButtonToolbar","DropdownButton","toLowerCase","Dropdown","Item","onClick","Alert","Button","ControlPanel","handleAddPlayer","playerInfo","form","FormData","playerFields","addPlayer","lastPlayerId","label","password","sendSlackMessage","Accordion","defaultActiveKey","Header","eventKey","field","MonthlyRecords","dateTitle","monthNumber","InputGroup","Prepend","bind","dateFormat","showMonthYearPicker","HomePage","basename","path","exact","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","initApp","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.c898ca74.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/one.f15b96a1.svg\";","module.exports = __webpack_public_path__ + \"static/media/second.7f4cae36.svg\";","module.exports = __webpack_public_path__ + \"static/media/third.a034b65e.svg\";","import firebase from 'firebase/app'\nimport { firestone } from 'firebase/firestore'\nimport { firebaseConfig } from './configs'\n\nfirebase.initializeApp(firebaseConfig)\n\nexport const DB = firebase.firestore()\n","export const firebaseConfig = {\n    apiKey: \"AIzaSyAr-tnxDvQTzaewLLGgNnXBQbxpOHyaUbw\",\n    authDomain: \"ping-board-c2743.firebaseapp.com\",\n    databaseURL: \"https://ping-board-c2743.firebaseio.com\",\n    projectId: \"ping-board-c2743\",\n    storageBucket: \"\",\n    messagingSenderId: \"88261141437\",\n    appId: \"1:88261141437:web:2f8e0157e8751fa84568d4\"\n}","let oneDay = 1000 * 60 * 60 * 24\nconst date = new Date()\n\n/**\n * @param {year} [number=2019] {default current year}.\n * @param {month} [number=12] {default current month} day number to month}.\n * @param {firstDay} [number=3] {default first day of the given month} day number to month.\n * @param {lastDay} [number=23] {default last day of the given month} day number to month.\n */\n\nexport function getMonthFirstLastDay({ monthDate = date }) {\n  const thisMonth = monthDate.getMonth()\n  const firstDayOfTheMonth = new Date(monthDate.getFullYear(), thisMonth, 1)\n  const lastDayOfTheMonth = new Date(monthDate.getFullYear(), thisMonth + 1, 0)\n  return {\n    firstDayOfTheMonth,\n    lastDayOfTheMonth\n  }\n}\n\n/**\n * @param {year} [number=2019]\n * @param {startDate} [date=today]\n */\nexport function dayToYear({ startDate = date }) {\n  const yearStartDay = new Date(date.getFullYear(), 0, 0)\n  const diff =\n    startDate -\n    yearStartDay +\n    (date.getTimezoneOffset() - date.getTimezoneOffset()) * 60 * 1000\n  const dayNumber = Math.floor(diff / oneDay)\n  const dateYear = startDate.getFullYear()\n  const dateMonth = ('0' + (startDate.getMonth() + 1)).slice(-2)\n  const yearPrefix = dateYear.toString().slice(-2)\n  const yearDayNumber = parseInt(yearPrefix.concat(dayNumber.toString()))\n  return {\n    year: dateYear,\n    month: dateMonth,\n    dayNumber: dayNumber,\n    yearDayNumber: yearDayNumber\n  }\n}\n\n/**\n * @param {day} object\n * @returns day number to year like 19313 to be used to get the matched day rounds\n */\nexport function dayWithYearNumber({ day }) {\n  const yearPrefix = day.year.toString().slice(-2)\n  const dayNumber = day.dayNumber.toString()\n  return parseInt(yearPrefix.concat(dayNumber))\n}\n\nexport function startEndDates(startDate, endDate) {\n  return {\n    startDateNumber: dayWithYearNumber({ day: startDate }),\n    endDateNumber: dayWithYearNumber({ day: endDate })\n  }\n}\n\nexport function monthName(monthNumber) {\n  const names = [\n    'January',\n    'February',\n    'March',\n    'April',\n    'May',\n    'June',\n    'July',\n    'August',\n    'September',\n    'October',\n    'November',\n    'December'\n  ]\n  return names[monthNumber]\n}\n","import { DB } from './firebase'\nimport { dayToYear, dayWithYearNumber } from '../helpers/timeFunctions'\nimport { firestore } from 'firebase'\nexport class API {\n  getCollectionData(collection, orderBy, orderQuery) {\n    const collectionData = orderBy\n      ? DB.collection(collection).orderBy(orderBy, orderQuery)\n      : DB.collection(collection)\n    return collectionData.get().then(querySnapshot => {\n      let dbValues = []\n      querySnapshot.forEach(doc => {\n        dbValues.push(doc.data())\n      })\n      return dbValues\n    })\n  }\n\n  dbCollection() {\n    return {\n      appManifest: 'manifest',\n      sections: 'sections',\n      players: 'players',\n      days: 'days'\n    }\n  }\n\n  get currentDayNumber() {\n    return parseInt(dayWithYearNumber({ day: dayToYear({}) }))\n  }\n\n  get players() {\n    return DB.collection(this.dbCollection().players)\n  }\n\n  get playersList() {\n    return DB.collection(this.dbCollection().players)\n      .orderBy('totalPoints', 'desc')\n      .get()\n      .then(querySnapshot => {\n        let players = []\n        querySnapshot.forEach(function(doc) {\n          players.push({ id: doc.id, ...doc.data() })\n        })\n        return players\n      })\n      .catch(error => {\n        console.log('Error getting the results: ', error)\n      })\n  }\n\n  lastPlayerId() {\n    return this.players.get().then(doc => {\n      let lastId = null\n      doc.forEach(doc => {\n        lastId = doc.id\n      })\n      return lastId\n    })\n  }\n\n  addPlayer({\n    id,\n    name,\n    slackName,\n    image,\n    monthlyRecords = {},\n    email,\n    totalPoints = 0\n  }) {\n    return DB.collection(this.dbCollection().players)\n      .doc(id)\n      .set({ name, slackName, image, monthlyRecords, email, totalPoints })\n      .then(player => {\n        console.log('the player has beed added')\n      })\n      .catch(e => console.log(e))\n  }\n\n  updatePlayer(player) {\n    DB.collection(this.dbCollection().players)\n      .doc(player.id)\n      .set({ ...player })\n      .then(player => {\n        console.log('the player has beed updated---> ', player)\n      })\n      .catch(e => console.log(e))\n  }\n\n  createNewDayEntry({ dayNumber }) {\n    return DB.collection('days')\n      .add({\n        insertDate: new Date(),\n        dayNumber: dayNumber,\n        rounds: []\n      })\n      .then(entryData => {\n        return entryData\n      })\n  }\n\n  addRound({ dayNumber, round }) {\n    const insertRound = doc => {\n      return DB.collection('days')\n        .doc(doc.id)\n        .update({\n          rounds: firestore.FieldValue.arrayUnion({ ...round })\n        })\n    }\n\n    return DB.collection('days')\n      .where('dayNumber', '==', dayNumber)\n      .get()\n      .then(data => {\n        if (!!data.docs[0]) {\n          return insertRound(data.docs[0])\n        } else {\n          return this.createNewDayEntry({ dayNumber: dayNumber }).then(doc => {\n            return insertRound(doc)\n          })\n        }\n      })\n  }\n\n  get todayScores() {\n    return this.getCollectionData(this.dbCollection().points)\n  }\n\n  getDayMatches({ dayNumber }) {\n    return DB.collection('days')\n      .where('dayNumber', '==', dayNumber)\n      .get()\n      .then(querySnapshot => {\n        let matches = []\n        querySnapshot.forEach(function(doc) {\n          matches.push(doc.data())\n        })\n        return matches\n      })\n      .then(data => data)\n      .catch(error => {\n        console.log('Error getting the results: ', error)\n      })\n  }\n}\n\nconst apiCall = new API()\nexport default apiCall\n","import React from 'react'\nimport Navbar from 'react-bootstrap/Navbar'\nimport Nav from 'react-bootstrap/Nav'\nimport apiCall from '../../helpers/API'\nimport './navbar.scss'\nimport { Link } from 'react-router-dom'\n\nexport default class NavBar extends React.Component {\n  constructor(props) {\n    super(props)\n    this.state = {\n      appSections: []\n    }\n  }\n\n  componentDidMount() {\n    const self = this\n    const databaseCollections = apiCall.dbCollection()\n    apiCall.getCollectionData(databaseCollections.sections).then(data => {\n      let sections = []\n      data.forEach(item => sections.push(item))\n      self.setState({ appSections: sections })\n      return sections\n    })\n  }\n\n  render() {\n    const sections = this.state.appSections\n\n    return (\n      <div className=\"app-navbar\">\n        <Navbar collapseOnSelect expand=\"lg\" bg=\"dark\" variant=\"dark\">\n          <Navbar.Brand href={process.env.PUBLIC_URL +'/'}>{this.props.appName}</Navbar.Brand>\n          <Navbar.Toggle aria-controls=\"responsive-navbar-nav\" />\n          <Navbar.Collapse id=\"responsive-navbar-nav\">\n            <Nav className=\"mr-auto\">\n              {sections.map(item => (\n                <Nav.Link href={item.url} key={item.name}>\n                  <Link\n                    style={{ textDecoration: 'none', color: 'inherit' }}\n                    to={item.url}\n                  >\n                    {' '}\n                    {item.name}\n                  </Link>\n                </Nav.Link>\n              ))}\n            </Nav>\n          </Navbar.Collapse>\n        </Navbar>\n      </div>\n    )\n  }\n}\n","import React from 'react'\nimport Jumbotron from 'react-bootstrap/Jumbotron'\nimport './section.scss'\n\nexport default class Section extends React.Component {\n  constructor(props) {\n    super(props)\n    this.state = {}\n  }\n\n  render() {\n    return (\n      <>\n        <div className=\"section-wrapper\">\n          <Jumbotron className={`section section--${this.props.background}`}>\n            <div>\n              <h2 className=\"section__title\">{this.props.title}</h2>\n            </div>\n            {this.props.children}\n          </Jumbotron>\n        </div>\n      </>\n    )\n  }\n}\n","import React from 'react'\nimport Container from 'react-bootstrap/Container'\nimport Row from 'react-bootstrap/Row'\nimport Col from 'react-bootstrap/Col'\nimport CardDeck from 'react-bootstrap/CardDeck'\nimport Card from 'react-bootstrap/Card'\nimport first from '../../assets/svgs/one.svg'\nimport second from '../../assets/svgs/second.svg'\nimport third from '../../assets/svgs/third.svg'\nimport PropTypes from 'prop-types'\nimport './cards-group.scss'\nimport { DB } from '../../helpers/firebase'\nimport { dayToYear, dayWithYearNumber } from '../../helpers/timeFunctions'\n\nexport default class CardsGroup extends React.Component {\n  constructor(props) {\n    super(props)\n    this.state = {\n      dayMatches: []\n    }\n  }\n\n  componentDidMount() {\n    const todayNumber = dayWithYearNumber({ day: dayToYear({}) })\n    const self = this\n    DB.collection('days')\n      .where('dayNumber', '==', todayNumber)\n      .get()\n      .then(querySnapshot => {\n        querySnapshot.forEach(function(doc) {\n          self.setState({\n            dayMatches: [...self.state.dayMatches, doc.data()]\n          })\n        })\n      })\n      .catch(error => {\n        console.log('Error getting the results: ', error)\n      })\n  }\n\n  card = (card, index, cardImages) => {\n    const { rounds } = card\n    return (\n      <Card className={`card-${card.position}`} key={index}>\n        <div className=\"cards-group__image-wrapper\">\n          <Card.Img variant=\"top\" src={cardImages[index]} />\n        </div>\n        <Card.Body>\n          {rounds.length >= 1 ? (\n            rounds.map((round, i) => (\n              <div key={i}>\n                <Card.Title>{round.description}</Card.Title>\n                <ul>\n                  <li>{round.players && round.players[card.position].name}</li>\n                </ul>\n              </div>\n            ))\n          ) : (\n            <>\n              <Card.Title>there is no data</Card.Title>\n            </>\n          )}\n        </Card.Body>\n        <Card.Footer>\n          {rounds.length >= 1 && (\n            <small className=\"text-muted\">''</small>\n          )}\n        </Card.Footer>\n      </Card>\n    )\n  }\n\n  render() {\n    const cards = this.props.cards\n    if (this.state.dayMatches[0]) {\n      cards.map(card => {\n        card.rounds = this.state.dayMatches[0].rounds || []\n      })\n    }\n\n    const cardImages = [second, first, third]\n    return (\n      <>\n        <Container className=\"cards-group\">\n          <Row>\n            }\n            <Col md={{ span: 10, offset: 1 }}>\n              <CardDeck>\n                {!!cards &&\n                  cards.forEach(card => {\n                    if (card.rounds.length < 1) {\n                    }\n                  })}\n                {cards.map((card, index) => this.card(card, index, cardImages))}\n              </CardDeck>\n            </Col>\n          </Row>\n        </Container>\n      </>\n    )\n  }\n}\n\nCardsGroup.propTypes = {\n  cards: PropTypes.array\n}\n\nCardsGroup.defaultProps = {\n  cards: [\n    { position: 2, rounds: [] },\n    { position: 1, rounds: [] },\n    { position: 3, rounds: [] }\n  ]\n}\n","import React from 'react'\nimport Table from 'react-bootstrap/Table'\nimport Row from 'react-bootstrap/Row'\nimport Col from 'react-bootstrap/Col'\nimport Container from 'react-bootstrap/Container'\nimport { DB } from '../../helpers/firebase'\nimport { dayToYear } from '../../helpers/timeFunctions'\n\nexport default class TableBoard extends React.Component {\n  constructor(props) {\n    super(props)\n    this.state = {\n      players: [],\n      month: null\n    }\n  }\n\n  componentDidMount() {\n    const currentDate = dayToYear({})\n    const yearMonth = currentDate.year\n      .toString()\n      .slice(-2)\n      .concat(currentDate.month.toString())\n    this.setState({ month: yearMonth })\n\n    const self = this\n    DB.collection('players')\n      .orderBy(`monthlyRecords.${yearMonth}`, 'desc')\n      .get()\n      .then(querySnapshot => {\n        let players = []\n        querySnapshot.forEach(function(doc) {\n          players.push(doc.data())\n        })\n        self.setState({\n          players: players\n        })\n      })\n      .catch(error => {\n        console.log('Error getting the results: ', error)\n      })\n  }\n\n  render() {\n    const { players, month } = this.state\n    return (\n      <>\n        <Container>\n          <Row>\n            <Col md={{ span: 10, offset: 1 }}>\n              <Table striped bordered hover variant=\"dark\">\n                <thead>\n                  <tr>\n                    <th>#</th>\n                    <th>First Name</th>\n                    <th>Slack name</th>\n                    <th>Points</th>\n                  </tr>\n                </thead>\n                <tbody>\n                  {players &&\n                    players.map((player, i) => (\n                      <tr key={i}>\n                        <td>{i + 1}</td>\n                        <td>{player.name}</td>\n                        <td>{player.slackName}</td>\n                        <td>{player.monthlyRecords[month]}</td>\n                      </tr>\n                    ))}\n                </tbody>\n              </Table>\n            </Col>\n          </Row>\n        </Container>\n      </>\n    )\n  }\n}\n","import React from 'react'\nimport Table from 'react-bootstrap/Table'\nimport Row from 'react-bootstrap/Row'\nimport Col from 'react-bootstrap/Col'\nimport Container from 'react-bootstrap/Container'\nimport apiCall from '../../helpers/API'\n\nexport default class Players extends React.Component {\n  constructor(props) {\n    super(props)\n    this.state = {\n      players: []\n    }\n  }\n\n  componentDidMount() {\n    const self = this\n    apiCall.players\n      .orderBy('name', 'asc')\n      .get()\n      .then(querySnapshot => {\n        let players = []\n        querySnapshot.forEach(function(doc) {\n          players.push(doc.data())\n        })\n        self.setState({\n          players: players\n        })\n      })\n      .catch(error => {\n        console.log('Error getting the results: ', error)\n      })\n  }\n\n  render() {\n    const { players } = this.state\n    return (\n      <>\n        <Container>\n          <Row>\n            <Col md={{ span: 10, offset: 1 }}>\n              <Table striped bordered hover variant=\"dark\">\n                <thead>\n                  <tr>\n                    <th>ID</th>\n                    <th>Name</th>\n                    <th>email</th>\n                    <th>Slack name</th>\n                  </tr>\n                </thead>\n                <tbody>\n                  {players.map((player, i) => (\n                    <tr key={i}>\n                      <td>{player.id}</td>\n                      <td>{player.name}</td>\n                      <td>{player.email}</td>\n                      <td>{player.slackName}</td>\n                    </tr>\n                  ))}\n                </tbody>\n              </Table>\n            </Col>\n          </Row>\n        </Container>\n      </>\n    )\n  }\n}\n","import React from 'react'\nimport Form from 'react-bootstrap/Form'\nimport Button from 'react-bootstrap/Button'\nimport Row from 'react-bootstrap/Row'\nimport Jumbotron from 'react-bootstrap/Jumbotron'\nimport ButtonToolbar from 'react-bootstrap/ButtonToolbar'\nimport Dropdown from 'react-bootstrap/Dropdown'\nimport DropdownButton from 'react-bootstrap/DropdownButton'\nimport apiCall from '../../../helpers/API'\nimport Card from 'react-bootstrap/Card'\nimport Alert from 'react-bootstrap/Alert'\nimport Col from 'react-bootstrap/Col'\nimport DatePicker from 'react-datepicker'\nimport { dayToYear } from '../../../helpers/timeFunctions'\nimport 'react-datepicker/dist/react-datepicker.css'\n\nexport default class AddRound extends React.Component {\n  constructor(props) {\n    super(props)\n    this.state = {\n      error: null,\n      playersList: [],\n      round: {\n        players: {},\n        date: null,\n        insertDate: new Date(),\n        description: ''\n      }\n    }\n  }\n\n  componentDidMount() {\n    apiCall.playersList.then(list => {\n      this.setState({\n        playersList: list\n      })\n    })\n  }\n\n  handleInput = e => {\n    e.persist()\n    const { name, value } = e.target\n    const round = this.state.round\n    round[name] = value\n    this.setState({ round: round })\n  }\n\n  handleDateChange = date => {\n    const newRound = this.state.round\n    newRound.date = date\n    newRound.players = {}\n    this.setState({ round: newRound, dayInfos: dayToYear({ startDate: date }) })\n  }\n\n  handleAddRound = e => {\n    e.preventDefault()\n    const { round, dayInfos } = this.state\n    if (Object.keys(round.players).length < 3) {\n      this.setState({ error: 'please choose 3 players!' })\n      return false\n    }\n    // ToDo: add the insertedBy data after having login feature\n    round.insertedBy = {}\n    apiCall\n      .addRound({ dayNumber: dayInfos.yearDayNumber, round: round })\n      .then(data => {\n        const { players } = round\n        for (let player of Object.keys(players)) {\n          this.updatePlayerPoints(players[player])\n        }\n        this.setState({\n          error: null,\n          playersList: [],\n          round: {\n            players: {},\n            date: null,\n            insertDate: new Date(),\n            description: ''\n          }\n        })\n      })\n      .catch(error => console.log('there is an error', error))\n  }\n\n  updatePlayerPoints(player) {\n    apiCall.updatePlayer(player)\n  }\n\n  selectedMonthId(date) {\n    const n = dayToYear({ startDate: date })\n    const { year, month } = n\n    const yearMonth = year\n      .toString()\n      .slice(-2)\n      .concat(month.toString())\n    return yearMonth\n  }\n\n  handleSelectPlayer = e => {\n    const stateRound = this.state.round\n    const scores = [0, 3, 2, 1]\n    const { name, id } = e.target\n    const position = name\n    // get the selected player and update it\n    const player = this.state.playersList.filter(player => player.id === id)[0]\n\n    const actualMonthlyPoints =\n      player.monthlyRecords[this.selectedMonthId(stateRound.date)] || 0\n    player.monthlyRecords[this.selectedMonthId(stateRound.date)] =\n      actualMonthlyPoints + scores[position]\n    player.totalPoints = player.totalPoints + scores[position]\n    //set the final player\n    stateRound.players[position] = player\n    this.setState({\n      round: { ...stateRound },\n      error: null\n    })\n  }\n\n  render() {\n    const { players } = this.state.round || {}\n    const positions = [\n      { style: 'Success', id: 1, title: 'First Player' },\n      { style: 'Primary', id: 2, title: 'Second Player' },\n      { style: 'Secondary', id: 3, title: 'third Player' }\n    ]\n    return (\n      <Card\n        style={{ backgroundColor: 'white', margin: '14px 0', padding: '7px' }}\n      >\n        <Jumbotron>\n          <h2>Add Round</h2>\n          <hr></hr>\n          <Form.Group controlId=\"roundDescription\">\n            <Form.Label>Give it a name</Form.Label>\n            <Form.Control\n              type=\"text\"\n              as=\"input\"\n              name=\"description\"\n              onChange={this.handleInput}\n              value={this.state.round.description}\n              placeholder=\"like lunch round..\"\n            />\n          </Form.Group>\n\n          <Form onSubmit={this.handleAddRound}>\n            <Form.Group controlId=\"roundDate\">\n              <Form.Label>Select round's date</Form.Label>\n              <br></br>\n              <Form.Text className=\"text-muted\">it's mandatory!</Form.Text>\n              <DatePicker\n                selected={this.state.round.date}\n                onChange={this.handleDateChange}\n                maxDate={new Date()}\n              />\n            </Form.Group>\n            <hr></hr>\n            {!!this.state.round.date && (\n              <Form.Row>\n                <ButtonToolbar>\n                  <Row>\n                    {positions.map((variant, i) => (\n                      <Col>\n                        <h6>\n                          {players[variant.id] ? players[variant.id].name : '-'}\n                        </h6>\n                        <DropdownButton\n                          title={variant.title}\n                          variant={variant.style.toLowerCase()}\n                          id={`dropdown-variants-${variant.style}`}\n                          key={variant.id}\n                        >\n                          {!!this.state.playersList &&\n                            this.state.playersList.map((player, i) => (\n                              <Dropdown.Item\n                                key={i}\n                                // position < first/second/third>\n                                name={variant.id}\n                                id={player.id}\n                                onClick={this.handleSelectPlayer}\n                              >\n                                {player.name}\n                              </Dropdown.Item>\n                            ))}\n                        </DropdownButton>\n                      </Col>\n                    ))}\n                  </Row>\n                </ButtonToolbar>\n              </Form.Row>\n            )}\n            <br />\n            {!!this.state.error && (\n              <>\n                <Alert key={4} variant=\"warning\">\n                  {this.state.error}\n                </Alert>\n                <br />\n              </>\n            )}\n            <Button variant=\"primary\" type=\"submit\">\n              Add Round\n            </Button>\n            <Form.Row></Form.Row>\n          </Form>\n        </Jumbotron>\n      </Card>\n    )\n  }\n}\n","import React from 'react'\nimport PropTypes from 'prop-types'\nimport Players from '../Players/Players'\nimport Form from 'react-bootstrap/Form'\nimport Col from 'react-bootstrap/Col'\nimport Button from 'react-bootstrap/Button'\nimport Row from 'react-bootstrap/Row'\nimport Accordion from 'react-bootstrap/Accordion'\nimport Card from 'react-bootstrap/Card'\nimport Container from 'react-bootstrap/Container'\nimport apiCall from '../../helpers/API'\nimport AddRound from './AddRound/AddRound'\nimport slack from 'slack'\n\nexport default class ControlPanel extends React.Component {\n  constructor(props) {\n    super(props)\n    this.state = {\n      lastPlayerId: null,\n      playerFields: {\n        name: {\n          name: 'name',\n          label: 'Name',\n          type: 'text',\n          placeholder: 'enter player name'\n        },\n        email: {\n          name: 'email',\n          label: 'Email',\n          type: 'email',\n          placeholder: 'enter player email'\n        },\n        password: {\n          name: 'password',\n          label: 'Password',\n          type: 'password',\n          placeholder: 'password'\n        },\n        slackName: {\n          name: 'slackName',\n          label: 'Slack name',\n          type: 'text',\n          placeholder: 'enter player slack name'\n        },\n        image: {\n          name: 'image',\n          label: 'Image',\n          type: 'text',\n          placeholder: 'enter image path'\n        }\n      }\n    }\n  }\n\n  componentDidMount() {\n    apiCall\n      .lastPlayerId()\n      .then(id =>\n        this.setState({\n          lastPlayerId: parseInt(id) + 1\n        })\n      )\n      .catch(e => {\n        console.log('the player id cant be generated')\n      })\n  }\n\n  handleAddPlayer = e => {\n    e.preventDefault()\n    const playerInfo = {}\n    const form = new FormData(e.target)\n    for (let item in this.state.playerFields) {\n      playerInfo[item] = form.get(item)\n    }\n    apiCall\n      .addPlayer({ ...playerInfo, id: this.state.lastPlayerId.toString() })\n      .then(data => {})\n  }\n\n  render() {\n    const { playerFields } = this.state\n    const addPlayerForm = () => {\n      return (\n        <Form onSubmit={this.handleAddPlayer}>\n          {!!playerFields &&\n            Object.keys(playerFields).map(field => (\n              <Form.Group key={playerFields[field].name}>\n                <Form.Label>{playerFields[field].label}</Form.Label>\n                <Form.Control {...playerFields[field]} />\n              </Form.Group>\n            ))}\n          <Button variant=\"primary\" type=\"submit\">\n            Add new player\n          </Button>\n        </Form>\n      )\n    }\n\n    return (\n      <>\n        <Container>\n          <Row>\n            <Col md={{ span: 10, offset: 1 }}>\n              <button onClick={this.sendSlackMessage}></button>\n              <AddRound />\n              <Accordion defaultActiveKey=\"0\">\n                <Card>\n                  <Accordion.Toggle as={Card.Header} eventKey=\"1\">\n                    Add Player\n                  </Accordion.Toggle>\n                  <Accordion.Collapse eventKey=\"1\">\n                    <Card.Body>{addPlayerForm()}</Card.Body>\n                  </Accordion.Collapse>\n                </Card>\n              </Accordion>\n            </Col>\n          </Row>\n        </Container>\n      </>\n    )\n  }\n}\n\nControlPanel.propTypes = {\n  Auth: PropTypes.array\n}\n","import React from 'react'\nimport DatePicker from 'react-datepicker'\nimport Container from 'react-bootstrap/Container'\nimport Col from 'react-bootstrap/Col'\nimport Row from 'react-bootstrap/Row'\nimport InputGroup from 'react-bootstrap/InputGroup'\nimport { monthName } from '../../helpers/timeFunctions'\n\nexport default class MonthlyRecords extends React.Component {\n  constructor(props) {\n    super(props)\n    this.state = {\n      date: null,\n      dateTitle: ''\n    }\n  }\n\n  handleDateChange(e) {\n    const date = new Date(e)\n    const month = date.getMonth()\n    const year = date.getFullYear()\n    const stateDate = this.setState({\n      dateTitle: `${monthName(month)} ${year}`\n    })\n  }\n\n  render() {\n    return (\n      <>\n        <Container>\n          <Row>\n            <Col md={{ span: 6, offset: 3 }}>\n              <h6>{this.state.dateTitle}</h6>\n              <InputGroup className=\"mb-3\">\n                <InputGroup.Prepend>\n                  <InputGroup.Text id=\"basic-addon1\">Date</InputGroup.Text>\n                  <DatePicker\n                    selected={this.state.date}\n                    onChange={this.handleDateChange.bind(this)}\n                    maxDate={new Date()}\n                    dateFormat=\"MM.yyyy\"\n                    showMonthYearPicker\n                  />\n                </InputGroup.Prepend>\n              </InputGroup>\n            </Col>\n          </Row>\n        </Container>\n      </>\n    )\n  }\n}\n","import React from 'react'\nimport AppNavbar from '../../containers/AppNavbar/AppNavbar'\nimport Section from '../../containers/Section/Section'\nimport CardsGroup from '../CardsGroup/CardsGroup'\nimport TableBoard from '../TableBoard/TableBoard'\nimport { BrowserRouter as Router, Route } from 'react-router-dom'\nimport Players from '../Players/Players'\nimport Control from '../ControlPanel'\nimport MonthlyRecords from '../MonthlyRecords/MonthlyRecords'\n\nexport default class HomePage extends React.Component {\n  render() {\n    console.log('--> 1.0.1')\n    return (\n      <div>\n        <Router basename={process.env.PUBLIC_URL}>\n          <AppNavbar appName={this.props.name} />\n          <Route path='/' exact>\n            <Section title=\"Todays Records\" background=\"black\">\n              <CardsGroup />\n            </Section>\n            <Section title=\"Monthly Records\">\n              <TableBoard />\n            </Section>\n          </Route>\n\n          <Route path=\"/players\" exact>\n            <Section title=\"Players table\">\n              <Players />\n            </Section>\n          </Route>\n\n          <Route path=\"/year\" exact>\n            <Section title=\"Yearly table\">\n              <h2>here is the Yearly table</h2>\n            </Section>\n          </Route>\n\n          <Route path=\"/month\" exact>\n            <Section title=\"Month\">\n              <MonthlyRecords />\n            </Section>\n          </Route>\n\n          <Route path=\"/control-panel\" exact>\n            <Section title=\"Admin Control\">\n              <Control />\n            </Section>\n          </Route>\n        </Router>\n      </div>\n    )\n  }\n}\n","import React from 'react'\nimport HomePage from './containers/HomePage'\nimport Helmet from 'react-helmet'\n\nexport class App extends React.Component {\n  constructor(props) {\n    super(props)\n    this.state = {\n      appManifest: {\n        appName: '..loading'\n      }\n    }\n  }\n\n  render() {\n    return (<>\n      <Helmet>\n        <title>Two Archs</title>\n      </Helmet>\n      <HomePage name={this.props.name} />\n    </>\n    )\n  }\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './App'\nimport './theme/index.scss'\nimport * as serviceWorker from './serviceWorker'\nimport apiCall from './helpers/API'\nimport 'bootstrap/dist/css/bootstrap.min.css'\n\nconst initApp = () => {\n  const databaseCollections = apiCall.dbCollection()\n  apiCall\n    .getCollectionData(databaseCollections.appManifest)\n    .then(data => data[0])\n    .then(data => {\n      let appManifest = data ? data : { name: 'Two Arcs' }\n      ReactDOM.render(\n        <App name={appManifest.name} />,\n        document.getElementById('root')\n      )\n    })\n}\n\ninitApp()\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister()\n"],"sourceRoot":""}